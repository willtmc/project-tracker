export const sequelize: Sequelize;
declare function findProjectByPk(pk: any, options?: {}): Promise<any>;
declare function findAllProjects(options?: {}): Promise<any>;
declare function findOneProject(options: any): Promise<any>;
declare function createProject(data: any): Promise<any>;
declare function updateProject(data: any, options: any): Promise<any>;
declare function destroyProject(options: any): Promise<any>;
declare function upsertProject(values: any, options: any): Promise<any>;
import { Sequelize } from "sequelize/types/sequelize";
export const ProjectHistory: import("sequelize").ModelCtor<import("sequelize").Model<any, any>>;
export function setupDatabase(): Promise<void>;
export const DB_PATH: string;
export declare let Project: {
    findByPk: typeof findProjectByPk;
    findAll: typeof findAllProjects;
    findOne: typeof findOneProject;
    create: typeof createProject;
    update: typeof updateProject;
    destroy: typeof destroyProject;
    upsert: typeof upsertProject;
    max: typeof import("sequelize").Model.max;
    min: typeof import("sequelize").Model.min;
    prototype: import("sequelize").Model<any, any>;
    tableName: string;
    primaryKeyAttribute: string;
    primaryKeyAttributes: readonly string[];
    associations: {
        [key: string]: import("sequelize").Association;
    };
    options: import("sequelize").InitOptions;
    rawAttributes: {
        [attribute: string]: import("sequelize").ModelAttributeColumnOptions;
    };
    getAttributes: typeof import("sequelize").Model.getAttributes;
    sequelize?: Sequelize;
    init: typeof import("sequelize").Model.init;
    removeAttribute: typeof import("sequelize").Model.removeAttribute;
    sync: typeof import("sequelize").Model.sync;
    drop: typeof import("sequelize").Model.drop;
    schema: typeof import("sequelize").Model.schema;
    getTableName: typeof import("sequelize").Model.getTableName;
    scope: typeof import("sequelize").Model.scope;
    addScope: typeof import("sequelize").Model.addScope;
    aggregate: typeof import("sequelize").Model.aggregate;
    count: typeof import("sequelize").Model.count;
    findAndCountAll: typeof import("sequelize").Model.findAndCountAll;
    sum: typeof import("sequelize").Model.sum;
    build: typeof import("sequelize").Model.build;
    bulkBuild: typeof import("sequelize").Model.bulkBuild;
    findOrBuild: typeof import("sequelize").Model.findOrBuild;
    findOrCreate: typeof import("sequelize").Model.findOrCreate;
    findCreateFind: typeof import("sequelize").Model.findCreateFind;
    bulkCreate: typeof import("sequelize").Model.bulkCreate;
    truncate: typeof import("sequelize").Model.truncate;
    restore: typeof import("sequelize").Model.restore;
    increment: typeof import("sequelize").Model.increment;
    decrement: typeof import("sequelize").Model.decrement;
    describe: typeof import("sequelize").Model.describe;
    unscoped: typeof import("sequelize").Model.unscoped;
    beforeValidate: typeof import("sequelize").Model.beforeValidate;
    afterValidate: typeof import("sequelize").Model.afterValidate;
    beforeCreate: typeof import("sequelize").Model.beforeCreate;
    afterCreate: typeof import("sequelize").Model.afterCreate;
    beforeDestroy: typeof import("sequelize").Model.beforeDestroy;
    afterDestroy: typeof import("sequelize").Model.afterDestroy;
    beforeUpdate: typeof import("sequelize").Model.beforeUpdate;
    afterUpdate: typeof import("sequelize").Model.afterUpdate;
    beforeSave: typeof import("sequelize").Model.beforeSave;
    afterSave: typeof import("sequelize").Model.afterSave;
    beforeBulkCreate: typeof import("sequelize").Model.beforeBulkCreate;
    afterBulkCreate: typeof import("sequelize").Model.afterBulkCreate;
    beforeBulkDestroy: typeof import("sequelize").Model.beforeBulkDestroy;
    afterBulkDestroy: typeof import("sequelize").Model.afterBulkDestroy;
    beforeBulkUpdate: typeof import("sequelize").Model.beforeBulkUpdate;
    afterBulkUpdate: typeof import("sequelize").Model.afterBulkUpdate;
    beforeFind: typeof import("sequelize").Model.beforeFind;
    beforeCount: typeof import("sequelize").Model.beforeCount;
    beforeFindAfterExpandIncludeAll: typeof import("sequelize").Model.beforeFindAfterExpandIncludeAll;
    beforeFindAfterOptions: typeof import("sequelize").Model.beforeFindAfterOptions;
    afterFind: typeof import("sequelize").Model.afterFind;
    beforeBulkSync: typeof import("sequelize").Model.beforeBulkSync;
    afterBulkSync: typeof import("sequelize").Model.afterBulkSync;
    beforeSync: typeof import("sequelize").Model.beforeSync;
    afterSync: typeof import("sequelize").Model.afterSync;
    hasOne: typeof import("sequelize").Model.hasOne;
    belongsTo: typeof import("sequelize").Model.belongsTo;
    hasMany: typeof import("sequelize").Model.hasMany;
    belongsToMany: typeof import("sequelize").Model.belongsToMany;
    addHook: typeof import("sequelize/types/hooks").Hooks.addHook;
    removeHook: typeof import("sequelize/types/hooks").Hooks.removeHook;
    hasHook: typeof import("sequelize/types/hooks").Hooks.hasHook;
    hasHooks: typeof import("sequelize/types/hooks").Hooks.hasHooks;
};
export {};
